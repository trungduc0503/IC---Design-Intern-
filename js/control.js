// Kh·ªüi t·∫°o tham chi·∫øu Firebase Database
const database = firebase.database();
const devicesRef = database.ref('devices');

// Tr·∫°ng th√°i c√°c thi·∫øt b·ªã
let deviceStates = {
    light: { isOn: false, brightness: 0 },
    fan: { power: false, speed: 1 },
    ac: { power: false, nhietdo: 25 }
};

// C√°c ph·∫ßn t·ª≠ DOM
const lightToggle = document.getElementById('light-toggle');
const lightBrightness = document.getElementById('light-brightness');
const sliderValue = document.querySelector('.slider-value');
const fanToggle = document.getElementById('fan-toggle');
const speedButtons = document.querySelectorAll('.speed-btn');
const acToggle = document.getElementById('ac-toggle');
const tempUp = document.getElementById('temp-up');
const tempDown = document.getElementById('temp-down');
const tempValue = document.querySelector('.temp-value');
const allOnButton = document.getElementById('all-on');
const allOffButton = document.getElementById('all-off');
const fanIcon = document.getElementById('fan-icon');

const fanSpeeds = { 1: '3s', 2: '1.5s', 3: '0.75s' };

// Kh·ªüi t·∫°o tr·∫°ng th√°i t·ª´ Firebase
devicesRef.on('value', (snapshot) => {
    const data = snapshot.val();
    if (data) {
        if (data.newStates) {
            deviceStates = { ...deviceStates, ...data.newStates };
        }
        // ƒê·ªìng b·ªô nhi·ªát ƒë·ªô t·ª´ dashboard n·∫øu c√≥
        if (data.currentStates && data.currentStates.temp) {
            deviceStates.ac.nhietdo = data.currentStates.temp;
        }
        updateUI();
    }
});

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n
function updateLightState(brightness) {
    const isOn = deviceStates.light.isOn;
    // C·∫≠p nh·∫≠t gi√° tr·ªã gradient c·ªßa thanh tr∆∞·ª£t
    lightBrightness.style.setProperty('--value', `${brightness}%`);
    
    // C·∫≠p nh·∫≠t c√°c ƒëi·ªÉm ƒë√°nh d·∫•u
    const marks = document.querySelectorAll('.brightness-mark');
    marks.forEach(mark => {
        const markValue = parseInt(mark.dataset.value);
        mark.classList.toggle('active', markValue <= brightness);
    });

    // Th√™m hi·ªáu ·ª©ng cho gi√° tr·ªã khi thay ƒë·ªïi
    const valueDisplay = document.querySelector('.slider-value');
    valueDisplay.classList.add('changing');
    setTimeout(() => valueDisplay.classList.remove('changing'), 1000);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† g·ª≠i l√™n Firebase
    deviceStates.light.brightness = brightness;
    updateDevice('light');
    updateLightIcon(isOn, brightness);
}

// ƒêi·ªÅu khi·ªÉn ƒë√®n
lightToggle.addEventListener('click', () => {
    deviceStates.light.isOn = !deviceStates.light.isOn;
    
    // N·∫øu b·∫≠t ƒë√®n, kh√¥i ph·ª•c ƒë·ªô s√°ng tr∆∞·ªõc ƒë√≥ ho·∫∑c m·∫∑c ƒë·ªãnh l√† 100%
    if (deviceStates.light.isOn && deviceStates.light.brightness === 0) {
        deviceStates.light.brightness = 100;
        lightBrightness.value = 100;
        sliderValue.textContent = '100%';
    }
    
    // N·∫øu t·∫Øt ƒë√®n, ƒë·∫∑t ƒë·ªô s√°ng v·ªÅ 0
    if (!deviceStates.light.isOn) {
        deviceStates.light.brightness = 0;
        lightBrightness.value = 0;
        sliderValue.textContent = '0%';
    }
    
    updateDevice('light');
    updateLightIcon(deviceStates.light.isOn, deviceStates.light.brightness);
});

lightBrightness.addEventListener('input', (e) => {
    const brightness = parseInt(e.target.value);
    sliderValue.textContent = `${brightness}%`;
    
    // Ch·ªâ cho ph√©p ƒëi·ªÅu ch·ªânh ƒë·ªô s√°ng khi ƒë√®n ƒëang b·∫≠t
    if (deviceStates.light.isOn) {
        updateLightState(brightness);
    } else if (brightness > 0) {
        // N·∫øu ƒë√®n ƒëang t·∫Øt v√† ng∆∞·ªùi d√πng k√©o thanh tr∆∞·ª£t, t·ª± ƒë·ªông b·∫≠t ƒë√®n
        deviceStates.light.isOn = true;
        updateLightState(brightness);
    }
});

// Th√™m hi·ªáu ·ª©ng hover cho thanh tr∆∞·ª£t
lightBrightness.addEventListener('mouseover', () => {
    lightBrightness.style.setProperty('--hover-opacity', '1');
});

lightBrightness.addEventListener('mouseout', () => {
    lightBrightness.style.setProperty('--hover-opacity', '0');
});

function updateLightIcon(isOn, brightness) {
    const lightIcon = document.getElementById('light-icon');
    if (!isOn || brightness === 0) {
        lightIcon.src = './img/lam_1.png';  // ƒê√®n t·∫Øt
    } else if (brightness <= 25) {
        lightIcon.src = './img/lam_2.png';  // S√°ng 25%
    } else if (brightness <= 50) {
        lightIcon.src = './img/lam_3.png';  // S√°ng 50%
    } else if (brightness <= 75) {
        lightIcon.src = './img/lam_4.png';  // S√°ng 75%
    } else {
        lightIcon.src = './img/lam_5.png';  // S√°ng 100%
    }
}

// ƒêi·ªÅu khi·ªÉn qu·∫°t
fanToggle.addEventListener('click', () => {
    deviceStates.fan.power = !deviceStates.fan.power;
    updateDevice('fan');
    updateFanAnimation();
});

speedButtons.forEach(btn => {
    btn.addEventListener('click', () => {
        deviceStates.fan.speed = parseInt(btn.dataset.speed);
        updateDevice('fan');
        updateFanAnimation();
    });
});

function updateFanAnimation() {
    fanIcon.className = deviceStates.fan.power ? `spin${deviceStates.fan.speed}` : 'spinStop';
}

// ƒêi·ªÅu khi·ªÉn m√°y l·∫°nh
acToggle.addEventListener('click', () => {
    deviceStates.ac.power = !deviceStates.ac.power;
    
    // Khi b·∫≠t m√°y l·∫°nh, c·∫≠p nh·∫≠t nhi·ªát ƒë·ªô hi·ªán t·∫°i l√™n dashboard
    if (deviceStates.ac.power) {
        devicesRef.update({
            [`newStates/ac`]: deviceStates.ac,
            [`currentStates/temp`]: deviceStates.ac.nhietdo
        });
    } else {
        // Khi t·∫Øt m√°y l·∫°nh, ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i
        devicesRef.update({
            [`newStates/ac`]: deviceStates.ac
        });
    }
    
    updateACIcon(deviceStates.ac.power);
});

function updateACIcon(isOn) {
    document.getElementById('ac-icon').src = isOn ? './img/air_on.png' : './img/air_off.png';
}

// ƒêi·ªÅu khi·ªÉn nhi·ªát ƒë·ªô m√°y l·∫°nh
let tempInterval;
const TEMP_ADJUST_DELAY = 80; // Gi·∫£m delay xu·ªëng ƒë·ªÉ m∆∞·ª£t h∆°n
let isAdjusting = false; // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i ƒëang ƒëi·ªÅu ch·ªânh
let holdTimeout; // Timeout ƒë·ªÉ x√°c ƒë·ªãnh th·ªùi gian gi·ªØ n√∫t

function updateTempUI(temp) {
    document.querySelector('.temp-value').textContent = temp;
    // Th√™m class ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông
    const tempDisplay = document.querySelector('.temp-display');
    tempDisplay.classList.add('updating');
    setTimeout(() => tempDisplay.classList.remove('updating'), 200);
}

function adjustTemperature(direction) {
    // Ki·ªÉm tra n·∫øu m√°y l·∫°nh ƒëang t·∫Øt th√¨ kh√¥ng cho ƒëi·ªÅu ch·ªânh
    if (!deviceStates.ac.power) {
        return;
    }

    if (isAdjusting) return; // Tr√°nh vi·ªác c·∫≠p nh·∫≠t qu√° nhanh
    isAdjusting = true;

    const currentTemp = deviceStates.ac.nhietdo;
    let newTemp = currentTemp;

    if (direction === 'up' && currentTemp < 30) {
        newTemp = currentTemp + 1;
    } else if (direction === 'down' && currentTemp > 16) {
        newTemp = currentTemp - 1;
    } else {
        isAdjusting = false;
        return;
    }

    // C·∫≠p nh·∫≠t UI tr∆∞·ªõc ƒë·ªÉ ph·∫£n h·ªìi nhanh
    deviceStates.ac.nhietdo = newTemp;
    updateTempUI(newTemp);

    // Ch·ªâ c·∫≠p nh·∫≠t nhi·ªát ƒë·ªô l√™n dashboard khi m√°y l·∫°nh ƒëang b·∫≠t
    if (deviceStates.ac.power) {
        // C·∫≠p nh·∫≠t c·∫£ tr·∫°ng th√°i v√† nhi·ªát ƒë·ªô dashboard
        const updates = {
            'newStates/ac/nhietdo': newTemp,
            'currentStates/temp': newTemp
        };
        devicesRef.update(updates)
            .then(() => {
                isAdjusting = false;
            })
            .catch(error => {
                console.error('L·ªói c·∫≠p nh·∫≠t nhi·ªát ƒë·ªô:', error);
                isAdjusting = false;
            });
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n gi·ªØ n√∫t
function handleTempButtonPress(direction) {
    // ƒê·∫ßu ti√™n ch·ªâ tƒÉng/gi·∫£m m·ªôt l·∫ßn
    adjustTemperature(direction);
    
    // Thi·∫øt l·∫≠p timeout ƒë·ªÉ b·∫Øt ƒë·∫ßu tƒÉng/gi·∫£m li√™n t·ª•c sau khi gi·ªØ 500ms
    holdTimeout = setTimeout(() => {
        tempInterval = setInterval(() => adjustTemperature(direction), TEMP_ADJUST_DELAY);
    }, 500);
}

function handleTempButtonRelease() {
    // X√≥a c·∫£ timeout v√† interval
    clearTimeout(holdTimeout);
    clearInterval(tempInterval);
    isAdjusting = false;
}

// C·∫≠p nh·∫≠t event listeners
tempUp.addEventListener('mousedown', () => handleTempButtonPress('up'));
tempDown.addEventListener('mousedown', () => handleTempButtonPress('down'));

// D·ª´ng vi·ªác tƒÉng/gi·∫£m khi nh·∫£ chu·ªôt ho·∫∑c r·ªùi kh·ªèi n√∫t
['mouseup', 'mouseleave'].forEach(event => {
    tempUp.addEventListener(event, handleTempButtonRelease);
    tempDown.addEventListener(event, handleTempButtonRelease);
});

// Th√™m hi·ªáu ·ª©ng active khi nh·∫•n n√∫t
['mousedown', 'touchstart'].forEach(event => {
    tempUp.addEventListener(event, () => {
        tempUp.classList.add('temp-btn-active');
    });
    
    tempDown.addEventListener(event, () => {
        tempDown.classList.add('temp-btn-active');
    });
});

['mouseup', 'mouseleave', 'touchend'].forEach(event => {
    tempUp.addEventListener(event, () => {
        tempUp.classList.remove('temp-btn-active');
    });
    
    tempDown.addEventListener(event, () => {
        tempDown.classList.remove('temp-btn-active');
    });
});

// ƒêi·ªÅu khi·ªÉn nhanh
allOnButton.addEventListener('click', () => {
    const newStates = {
        light: { isOn: true, brightness: 100 },
        fan: { power: true, speed: 3 },
        ac: { power: true, nhietdo: 25 }
    };

    // C·∫≠p nh·∫≠t local state tr∆∞·ªõc ƒë·ªÉ ph·∫£n h·ªìi nhanh
    deviceStates = { ...deviceStates, ...newStates };
    updateUI();

    // C·∫≠p nh·∫≠t l√™n Firebase s·ª≠ d·ª•ng `update()` ƒë·ªÉ tr√°nh ghi ƒë√® to√†n b·ªô d·ªØ li·ªáu
    devicesRef.child("newStates").update(newStates)
    .then(() => console.log('üî• B·∫≠t t·∫•t c·∫£ th√†nh c√¥ng!'))
    .catch(error => console.error('‚ö†Ô∏è L·ªói khi b·∫≠t t·∫•t c·∫£ thi·∫øt b·ªã:', error));
});

allOffButton.addEventListener('click', () => {
    const newStates = {
        light: { isOn: false, brightness: 0 },
        fan: { power: false, speed: 1 },
        ac: { power: false, nhietdo: 25 }
    };

    deviceStates = { ...deviceStates, ...newStates };
    updateUI();

    devicesRef.child("newStates").update(newStates)
    .then(() => console.log('‚ùå T·∫Øt t·∫•t c·∫£ th√†nh c√¥ng!'))
    .catch(error => console.error('‚ö†Ô∏è L·ªói khi t·∫Øt t·∫•t c·∫£ thi·∫øt b·ªã:', error));
});

// C·∫≠p nh·∫≠t Firebase
function updateDevice(device) {
    devicesRef.update({ [`newStates/${device}`]: deviceStates[device] })
        .then(updateUI)
        .catch(error => console.error('L·ªói c·∫≠p nh·∫≠t thi·∫øt b·ªã:', error));
}

// C·∫≠p nh·∫≠t UI
function updateUI() {
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n
    lightBrightness.value = deviceStates.light.brightness;
    sliderValue.textContent = `${deviceStates.light.brightness}%`;
    lightToggle.classList.toggle('active', deviceStates.light.isOn);
    updateLightIcon(deviceStates.light.isOn, deviceStates.light.brightness);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫°t
    fanToggle.classList.toggle('active', deviceStates.fan.power);
    speedButtons.forEach(btn => btn.classList.toggle('active', parseInt(btn.dataset.speed) === deviceStates.fan.speed));
    updateFanAnimation();
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i m√°y l·∫°nh
    acToggle.classList.toggle('active', deviceStates.ac.power);
    updateACIcon(deviceStates.ac.power);
    document.querySelector('.temp-value').textContent = deviceStates.ac.nhietdo;
    
    // Th√™m x·ª≠ l√Ω disable/enable c√°c n√∫t ƒëi·ªÅu ch·ªânh nhi·ªát ƒë·ªô
    const tempButtons = document.querySelectorAll('.temp-btn');
    tempButtons.forEach(btn => {
        btn.disabled = !deviceStates.ac.power;
        btn.style.opacity = deviceStates.ac.power ? '1' : '0.5';
        btn.style.cursor = deviceStates.ac.power ? 'pointer' : 'not-allowed';
    });
}
